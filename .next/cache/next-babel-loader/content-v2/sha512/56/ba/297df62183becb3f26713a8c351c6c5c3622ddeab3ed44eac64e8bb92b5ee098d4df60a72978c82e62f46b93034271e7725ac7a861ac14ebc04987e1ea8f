{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/media/bruno/E2CE6648CE6614D7/NLW5 - reactjs/nlw5-reactjs/podcastr/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPLaying,\n    1: setIsPlaying\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function tooglePlay() {\n    setIsPlaying(!isPLaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      isPLaying,\n      tooglePlay,\n      setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/media/bruno/E2CE6648CE6614D7/NLW5 - reactjs/nlw5-reactjs/podcastr/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPLaying","setIsPlaying","play","episode","tooglePlay","setPlayingState","state"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAmD,OAAnD;AAmBA,OAAO,MAAMC,aAAa,gBAAGF,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASG,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA6C;AAChD,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACF,QAAM;AAAA,OAACM,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDP,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,KAAD,CAA1C;;AAEA,WAASU,IAAT,CAAcC,OAAd,EAAgC;AAC9BN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASG,UAAT,GAAsB;AACpBH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASK,eAAT,CAAyBC,KAAzB,EAAyC;AACvCL,IAAAA,YAAY,CAACK,KAAD,CAAZ;AACD;;AAED,sBACE,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEV,MAAAA,WAAF;AAAeE,MAAAA,mBAAf;AAAoCI,MAAAA,IAApC;AAA0CF,MAAAA,SAA1C;AAAqDI,MAAAA,UAArD;AAAiEC,MAAAA;AAAjE,KAA/B;AAAA,cACKV;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AAKD","sourcesContent":["import { createContext, useState, ReactNode } from 'react';\n\ntype Episode = {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n};\n\ntype PlayerContextData = {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;\n    isPLaying: boolean;\n    play: (episode: Episode) => void;\n    setPlayingState: (state: boolean) => void;\n    tooglePlay: () => void;\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n    children: ReactNode;\n}\n\nexport function PlayerContextProvider({ children }) {\n    const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPLaying, setIsPlaying] = useState(false);\n\n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function tooglePlay() {\n    setIsPlaying(!isPLaying);\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state);\n  }\n\n  return (\n    <PlayerContext.Provider value={{ episodeList, currentEpisodeIndex, play, isPLaying, tooglePlay, setPlayingState}}>\n       { children}  \n    </PlayerContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}